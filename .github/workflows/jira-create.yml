name: Sync GitHub Issues with Jira

on:
  issues:
    types: [opened, edited, closed, reopened, labeled, assigned]
  issue_comment:
    types: [created, edited]

permissions:
  contents: read
  issues: write

env:
  JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
  JIRA_EMAIL:     ${{ secrets.JIRA_EMAIL }}
  JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
  JIRA_PROJECT:   ${{ secrets.JIRA_PROJECT }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Derive vars
        id: vars
        run: |
          set -e
          KEY=$(echo '${{ toJson(github.event.issue.labels) }}' \
            | jq -r '.[]?.name | select(startswith("jira:")) | split(":")[1]' | head -n1)
          echo "jira_key=$KEY" >> $GITHUB_OUTPUT
          echo "event=${{ github.event_name }}/${{ github.event.action }}" >> $GITHUB_OUTPUT
          echo "new_label=${{ github.event.label.name }}" >> $GITHUB_OUTPUT

      ####################################################################
      # 1) OPENED → Jira Task oluştur + GitHub'a label ve link yorumu
      ####################################################################
      - name: Create Jira issue (on opened)
        id: create
        if: github.event_name == 'issues' && github.event.action == 'opened'
        env:
          GH_TITLE: ${{ github.event.issue.title }}
          GH_BODY:  ${{ github.event.issue.body }}
          GH_URL:   ${{ github.event.issue.html_url }}
        run: |
          set -e
          jq -n \
            --arg project "$JIRA_PROJECT" \
            --arg summary "$GH_TITLE" \
            --arg url "$GH_URL" \
            --arg body "$GH_BODY" \
            '{
              fields:{
                project:{key:$project},
                summary:$summary,
                description:{
                  type:"doc", version:1,
                  content: (
                    [
                      {type:"paragraph", content:[
                        {type:"text", text:"GitHub Issue: "},
                        {type:"text", text:$url, marks:[{type:"link", attrs:{href:$url}}]}
                      ]}
                    ]
                    + (
                      ($body | split("\n")) | map({type:"paragraph",content:[{type:"text",text:.}]})
                    )
                  )
                },
                issuetype:{name:"Task"}
              }
            }' > payload.json

          RESP=$(curl -sS -w ":%{http_code}" -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data @payload.json \
            "$JIRA_BASE_URL/rest/api/3/issue")
          BODY="${RESP%:*}"; CODE="${RESP##*:}"
          echo "$BODY" > response.json; echo "HTTP $CODE"; cat response.json
          [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]
          KEY=$(jq -r '.key' response.json)
          echo "jira_key=$KEY" >> $GITHUB_OUTPUT

      - name: Label GitHub issue with jira:<KEY>
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const key = "${{ steps.create.outputs.jira_key }}";
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [`jira:${key}`]
            });

      - name: Comment back link to Jira
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const key = "${{ steps.create.outputs.jira_key }}";
            const url = `${process.env.JIRA_BASE_URL}/browse/${key}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Created Jira issue **${key}** → ${url}`
            });

      ####################################################################
      # 2) EDITED → Jira summary/description güncelle (ADF)
      ####################################################################
      - name: Update Jira on edit
        if: github.event_name == 'issues' && github.event.action == 'edited'
        env:
          JIRA_KEY: ${{ steps.vars.outputs.jira_key }}
          GH_TITLE: ${{ github.event.issue.title }}
          GH_BODY:  ${{ github.event.issue.body }}
          GH_URL:   ${{ github.event.issue.html_url }}
        run: |
          set -e
          [ -z "$JIRA_KEY" ] && exit 0
          jq -n \
            --arg summary "$GH_TITLE" \
            --arg url "$GH_URL" \
            --arg body "$GH_BODY" \
            '{fields:{
              summary:$summary,
              description:{
                type:"doc", version:1,
                content: (
                  [
                    {type:"paragraph", content:[
                      {type:"text", text:"GitHub Issue: "},
                      {type:"text", text:$url, marks:[{type:"link", attrs:{href:$url}}]}
                    ]}
                  ]
                  + (
                    ($body | split("\n")) | map({type:"paragraph",content:[{type:"text",text:.}]})
                  )
                )
              }
            }}' > patch.json

          RESP=$(curl -sS -w ":%{http_code}" -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -X PUT -H "Content-Type: application/json" \
            --data @patch.json \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_KEY")
          CODE="${RESP##*:}"; echo "HTTP $CODE"; [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]

      ####################################################################
      # 3) CLOSED → Jira DONE
      ####################################################################
      - name: Transition to DONE (on close)
        if: github.event_name == 'issues' && github.event.action == 'closed'
        env:
          JIRA_KEY: ${{ steps.vars.outputs.jira_key }}
        run: |
          set -e
          [ -z "$JIRA_KEY" ] && exit 0
          LIST=$(curl -sS -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_KEY/transitions")
          ID=$(echo "$LIST" | jq -r '.transitions[] | select(.name|test("(?i)^done$")) | .id')
          [ -n "$ID" ] && curl -sS -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$(jq -n --arg id "$ID" '{transition:{id:$id}}')" \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_KEY/transitions" -o /dev/null

      ####################################################################
      # 4) REOPENED veya LABELED(in-progress) → Jira IN PROGRESS
      ####################################################################
      - name: Transition to IN PROGRESS (on reopen/label)
        if: >
          (github.event_name == 'issues' && github.event.action == 'reopened')
          || (github.event_name == 'issues' && github.event.action == 'labeled' && steps.vars.outputs.new_label == 'in-progress')
        env:
          JIRA_KEY: ${{ steps.vars.outputs.jira_key }}
        run: |
          set -e
          [ -z "$JIRA_KEY" ] && exit 0
          LIST=$(curl -sS -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_KEY/transitions")
          ID=$(echo "$LIST" | jq -r '.transitions[] | select(.name|test("(?i)^in progress$")) | .id')
          [ -n "$ID" ] && curl -sS -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$(jq -n --arg id "$ID" '{transition:{id:$id}}')" \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_KEY/transitions" -o /dev/null

      ####################################################################
      # 5) ASSIGNED → Sadece assignee Jira'ya aynalansın (status değişmez)
      ####################################################################
      - name: Mirror assignee to Jira (on assigned)
        if: github.event_name == 'issues' && github.event.action == 'assigned'
        env:
          JIRA_KEY: ${{ steps.vars.outputs.jira_key }}
          GH_ASSIGNEE: ${{ github.event.assignee.login }}
          JIRA_USER_MAP: ${{ secrets.JIRA_USER_MAP }}
        run: |
          set -e
          [ -z "$JIRA_KEY" ] && exit 0

          if [ -z "$JIRA_USER_MAP" ]; then
            echo "No JIRA_USER_MAP configured"; exit 0
          fi

          ACCOUNT_ID=$(echo "$JIRA_USER_MAP" | jq -r --arg u "$GH_ASSIGNEE" '.[$u] // empty')
          if [ -z "$ACCOUNT_ID" ]; then
            echo "No mapping for $GH_ASSIGNEE in JIRA_USER_MAP"; exit 0
          fi

          # Jira Cloud requires PUT (POST → 405)
          RESP=$(curl -sS -w ":%{http_code}" -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -X PUT -H "Content-Type: application/json" \
            --data "$(jq -n --arg id "$ACCOUNT_ID" '{accountId:$id}')" \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_KEY/assignee")
          CODE="${RESP##*:}"; echo "Assign HTTP $CODE"
          [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]

      ####################################################################
      # 6) COMMENT → Mirror to Jira (created + edited)
      ####################################################################
      - name: Mirror comment to Jira
        if: github.event_name == 'issue_comment' && (github.event.action == 'created' || github.event.action == 'edited')
        env:
          JIRA_KEY: ${{ steps.vars.outputs.jira_key }}
          CMT: ${{ github.event.comment.body }}
          CMT_URL: ${{ github.event.comment.html_url }}
          AUTHOR: ${{ github.actor }}
        run: |
          set -e
          [ -z "$JIRA_KEY" ] && exit 0
          jq -n \
            --arg author "$AUTHOR" \
            --arg url "$CMT_URL" \
            --arg cmt "$CMT" \
            '{
              body:{
                type:"doc", version:1,
                content: (
                  [
                    {type:"paragraph", content:[
                      {type:"text", text:"GitHub comment by "},
                      {type:"text", text:$author},
                      {type:"text", text:": "},
                      {type:"text", text:$url, marks:[{type:"link", attrs:{href:$url}}]}
                    ]}
                  ]
                  + (
                    ($cmt | split("\n")) | map({type:"paragraph", content:[{type:"text", text:.}]})
                  )
                )
              }
            }' > c.json

          RESP=$(curl -sS -w ":%{http_code}" -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data @c.json \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_KEY/comment")
          CODE="${RESP##*:}"; echo "HTTP $CODE"; [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]
